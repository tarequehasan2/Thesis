// This file was generated automatically by the Snowball to Java compiler

package org.tartarus.snowball.ext;

import org.tartarus.snowball.Among;

 /**
  * This class was automatically generated by a Snowball to Java compiler 
  * It implements the stemming algorithm defined by a snowball script.
  */

public class  extends org.tartarus.snowball.SnowballProgram {

private static final long serialVersionUID = 1L;

        private final static  methodObject = new  ();

                private final static Among a_0[] = {
                    new Among ( "\u00E0\u00A6\u0085\u00E0\u00A6\u00A8\u00E0\u00A7\u0087\u00E0\u00A6\u0095", -1, 5, "", methodObject ),
                    new Among ( "\u00E0\u00A6\u0087", -1, 2, "", methodObject ),
                    new Among ( "\u00E0\u00A6\u0093", -1, 3, "", methodObject ),
                    new Among ( "\u00E0\u00A6\u00AA\u00E0\u00A7\u008C\u00E0\u00A6\u00B7", -1, 7, "", methodObject ),
                    new Among ( "\u00E0\u00A6\u00B2\u00E0\u00A7\u0087\u00E0\u00A6\u00AE", -1, 6, "", methodObject ),
                    new Among ( "\u00E0\u00A7\u0087\u00E0\u00A6\u00B2", -1, 1, "", methodObject ),
                    new Among ( "\u00E0\u00A7\u008B\u00E0\u00A6\u00A4", -1, 4, "", methodObject )
                };

                private final static Among a_1[] = {
                    new Among ( "\u00E0\u00A6\u00B0\u00E0\u00A6\u009B", -1, 1, "", methodObject ),
                    new Among ( "\u00E0\u00A6\u00B0\u00E0\u00A6\u00AC", -1, 2, "", methodObject )
                };


                private void copy_from( other) {
                    super.copy_from(other);
                }

                private boolean r_remove() {
            int among_var;
                    // (, line 87
                    // [, line 88
                    bra = cursor;
                    // substring, line 88
                    among_var = find_among(a_0, 7);
                    if (among_var == 0)
                    {
                        return false;
                    }
                    // ], line 88
                    ket = cursor;
                    switch(among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 89
                            // <-, line 89
                            slice_from("");
                            break;
                        case 2:
                            // (, line 90
                            // <-, line 90
                            slice_from("");
                            break;
                        case 3:
                            // (, line 91
                            // <-, line 91
                            slice_from("");
                            break;
                        case 4:
                            // (, line 92
                            // <-, line 92
                            slice_from("");
                            break;
                        case 5:
                            // (, line 94
                            // <-, line 94
                            slice_from("\u00E0\u00A6\u0085\u00E0\u00A6\u00A8\u00E0\u00A6\u00BF\u00E0\u00A6\u0095");
                            break;
                        case 6:
                            // (, line 96
                            // <-, line 96
                            slice_from("");
                            break;
                        case 7:
                            // (, line 97
                            // <-, line 97
                            slice_from("\u00E0\u00A6\u00AA\u00E0\u00A6\u00B8");
                            break;
                    }
                    return true;
                }

                private boolean r_replace1() {
            int among_var;
                    // (, line 104
                    // [, line 105
                    bra = cursor;
                    // substring, line 105
                    among_var = find_among(a_1, 2);
                    if (among_var == 0)
                    {
                        return false;
                    }
                    // ], line 105
                    ket = cursor;
                    switch(among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 106
                            // <-, line 106
                            slice_from("\u00E0\u00A6\u00B0");
                            break;
                        case 2:
                            // (, line 107
                            // <-, line 107
                            slice_from("\u00E0\u00A6\u00AC\u00E0\u00A6\u0097");
                            break;
                    }
                    return true;
                }

                private boolean r_replace2() {
                    // (, line 113
                    return true;
                }

                public boolean stem() {
            int v_1;
            int v_2;
                    // (, line 117
                    // do, line 119
                    v_1 = cursor;
                    lab0: do {
                        // call remove, line 119
                        if (!r_remove())
                        {
                            break lab0;
                        }
                    } while (false);
                    cursor = v_1;
                    // do, line 121
                    v_2 = cursor;
                    lab1: do {
                        // call replace1, line 121
                        if (!r_replace1())
                        {
                            break lab1;
                        }
                    } while (false);
                    cursor = v_2;
                    // do, line 122
                    lab2: do {
                        // call replace2, line 122
                        if (!r_replace2())
                        {
                            break lab2;
                        }
                    } while (false);
                    return true;
                }

        public boolean equals( Object o ) {
            return o instanceof ;
        }

        public int hashCode() {
            return .class.getName().hashCode();
        }



}

